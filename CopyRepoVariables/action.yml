name: CopyRepoVariables
inputs:
  src_repo:
    description: |
    Source asterisk org repo:
    required: true
    type: string
  dst_repo:
    description: |
    Destination asterisk org repo:
    required: true
    type: string
  gh_secret:
    required: true
    type: string

runs:
  using: "composite"
  steps:
    - id: copyvars
      uses: actions/github-script@v6
      env:
        SRC_REPO: "${{inputs.src_repo}}"
        DST_REPO: "${{inputs.dst_repo}}"
      with:
        github-token: ${{ inputs.gh_secret }}
        retries: 5
        script: |
          let source = await github.paginate('GET /repos/{owner}/{repo}/actions/variables', {
            owner: 'asterisk',
            repo: `${process.env.SRC_REPO}`,
            per_page: 100,
            headers: {
              'X-GitHub-Api-Version': '2022-11-28'
            }
          })
          let existing = await github.paginate('GET /repos/{owner}/{repo}/actions/variables', {
            owner: 'asterisk',
            repo: `${process.env.DST_REPO}`,
            per_page: 100,
            headers: {
              'X-GitHub-Api-Version': '2022-11-28'
            }
          })
          let exists = {};
          for (const vv of existing) {
            exists[vv.name] = vv.value;
          }

          for (const vv of source) {
            if (typeof exists[vv.name] != "undefined") {
              uri = 'PATCH /repos/{owner}/{repo}/actions/variables/{name}';
              console.log(`Updating variable ${vv.name}`);
            } else {
              uri = 'POST /repos/{owner}/{repo}/actions/variables';
              console.log(`Creating variable ${vv.name}`);
            }
            await github.request(uri, {
              owner: 'asterisk',
              repo: `${process.env.DST_REPO}`,
              name: vv.name,
              value: vv.value,
              headers: {
                'X-GitHub-Api-Version': '2022-11-28'
              }
            })
          }
